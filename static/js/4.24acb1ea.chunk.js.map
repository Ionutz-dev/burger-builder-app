{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidityHandler","setState","onSubmitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","redirectPath","onSetAuthRedirectPath","formElemenstArray","key","push","id","config","form","map","el","changed","invalid","shouldValidate","loading","errorMessage","error","message","className","classes","Error","authRedirect","isAuth","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","onChange","join","options","option","displayValue","validationError","ValidationError","Input","Label"],"mappings":"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","file":"static/js/4.24acb1ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2-Mae\",\"Input\":\"Auth_Input__2TBtU\",\"H4\":\"Auth_H4__2rFj0\",\"Error\":\"Auth_Error__yyDeY\"};","import React, { Component } from 'react';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { updateObject, checkValidityHandler } from '../../shared/utility';\r\n\r\nimport classes from './Auth.module.css';\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'E-mail address',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 8,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignUp: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (\r\n      !this.props.buildingBurger &&\r\n      this.props.redirectPath !== '/burger-builder'\r\n    ) {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidityHandler(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  onSubmitHandler = event => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        isSignUp: !prevState.isSignUp,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElemenstArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElemenstArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElemenstArray.map(el => {\r\n      return (\r\n        <Input\r\n          key={el.id}\r\n          elementType={el.config.elementType}\r\n          elementConfig={el.config.elementConfig}\r\n          value={el.config.value}\r\n          changed={event => this.inputChangedHandler(event, el.id)}\r\n          invalid={!el.config.valid}\r\n          shouldValidate={el.config.validation}\r\n          touched={el.config.touched}\r\n        />\r\n      );\r\n    });\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      if (this.props.error.message === 'EMAIL_EXISTS')\r\n        errorMessage = <p className={classes.Error}>Email already exists</p>;\r\n      if (this.props.error.message === 'INVALID_EMAIL')\r\n        errorMessage = <p className={classes.Error}>Invalid email</p>;\r\n      if (this.props.error.message === 'OPERATION_NOT_ALLOWED')\r\n        errorMessage = <p className={classes.Error}>Operation not allowed</p>;\r\n      if (this.props.error.message === 'TOO_MANY_ATTEMPTS_TRY_LATER')\r\n        errorMessage = (\r\n          <p className={classes.Error}>Too many attempts, try later</p>\r\n        );\r\n      if (this.props.error.message === 'EMAIL_NOT_FOUND')\r\n        errorMessage = <p className={classes.Error}>Email not found</p>;\r\n      if (this.props.error.message === 'INVALID_PASSWORD')\r\n        errorMessage = <p className={classes.Error}>Invalid password</p>;\r\n      if (this.props.error.message === 'USER_DISABLED')\r\n        errorMessage = <p className={classes.Error}>Disabled account</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuth) {\r\n      authRedirect = <Redirect to={this.props.redirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.onSubmitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n          SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: state.auth.token !== null,\r\n    redirectPath: state.auth.redirectPath,\r\n    buildingBurger: state.burgerBuilder.building,\r\n  };\r\n};\r\n\r\nconst mapDispatchActions = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () =>\r\n      dispatch(actions.setAuthRedirectPath('/burger-builder')),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchActions)(Auth);\r\n","import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map(option => {\r\n            return (\r\n              <option key={option.value} value={option.value}>\r\n                {option.displayValue}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={classes.InputElement}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  let validationError = null;\r\n  if (props.invalid && props.touched) {\r\n    validationError = (\r\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label>{props.Label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__12CHX\",\"Label\":\"Input_Label__KyXh_\",\"InputElement\":\"Input_InputElement__2529G\",\"Invalid\":\"Input_Invalid__lreMA\",\"ValidationError\":\"Input_ValidationError__Yy-3j\"};"],"sourceRoot":""}