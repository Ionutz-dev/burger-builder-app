{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","telephone","street","zipCode","minLength","maxLength","country","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","key","console","log","order","price","orderData","userId","token","onOrderBurger","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidityHandler","updatedOrderForm","identifier","setState","formElemenstArray","this","push","id","config","form","onSubmit","map","el","Input","changed","invalid","shouldValidate","disabled","loading","Spinner","H4","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","match","path","summary","to","purchaseRedirect","purchased","component","input","inputElement","inputClasses","InputElement","Invalid","onChange","join","option","validationError","ValidationError","Label"],"mappings":"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","file":"static/js/3.b3bac633.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__GlMYk\",\"Input\":\"ContactData_Input__3e3lW\",\"H4\":\"ContactData_H4__32BcZ\"};","import React from 'react';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst checkoutSummary = props => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>Enjoy the burger!</h1>\r\n      <div style={{ width: '100%', margin: 'auto' }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from 'react';\r\nimport axios from '../../../axios-orders';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidityHandler } from '../../../shared/utility';\r\n\r\nimport classes from './ContactData.module.css';\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your name',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Your email',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      telephone: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'tel',\r\n          placeholder: 'Your telephone',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Street',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Zpicode',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Country',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: 'select',\r\n        elementConfig: {\r\n          options: [\r\n            { value: 'fastest', displayValue: 'Fastest' },\r\n            { value: 'cheapest', displayValue: 'Cheapest' },\r\n          ],\r\n        },\r\n        value: 'fastest',\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = event => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let key in this.state.orderForm) {\r\n      formData[key] = this.state.orderForm[key].value;\r\n    }\r\n    console.log(formData);\r\n    const order = {\r\n      ingredients: this.props.ingredients,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n    console.log(order);\r\n    console.log(this.props.token);\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidityHandler(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let identifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[identifier] && formIsValid;\r\n    }\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElemenstArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElemenstArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n      // console.log(this.state.orderForm[key]);\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {/* <Input elementType=\"...\" elementConfig=\"...\" value=\"...\" /> */}\r\n        {formElemenstArray.map(el => {\r\n          return (\r\n            <Input\r\n              key={el.id + 1}\r\n              elementType={el.config.elementType}\r\n              elementConfig={el.config.elementConfig}\r\n              value={el.config.value}\r\n              changed={event => this.inputChangedHandler(event, el.id)}\r\n              invalid={!el.config.valid}\r\n              shouldValidate={el.config.validation}\r\n              touched={el.config.touched}\r\n            />\r\n          );\r\n        })}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4 className={classes.H4}>Please complete with your data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchActions = dispatch => {\r\n  return {\r\n    onOrderBurger: (order, token) =>\r\n      dispatch(actions.purchaseBurger(order, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchActions\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(this.props.match.path + '/contact-data');\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/burger-builder\" />;\r\n\r\n    if (this.props.ingredients) {\r\n      const purchaseRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchaseRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ingredients}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n          <Route\r\n            path={this.props.match.path + '/contact-data'}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map(option => {\r\n            return (\r\n              <option key={option.value} value={option.value}>\r\n                {option.displayValue}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={classes.InputElement}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n  let validationError = null;\r\n  if (props.invalid && props.touched) {\r\n    validationError = (\r\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label>{props.Label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__12CHX\",\"Label\":\"Input_Label__KyXh_\",\"InputElement\":\"Input_InputElement__2529G\",\"Invalid\":\"Input_Invalid__lreMA\",\"ValidationError\":\"Input_ValidationError__Yy-3j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3pZ3e\"};"],"sourceRoot":""}